AWSTemplateFormatVersion: "2010-09-09"
Description: "Discord Bot Keep Alive - Lambda + EventBridge"

Parameters:
  RenderUrl:
    Type: String
    Default: "https://onsurvey-discord-bot.onrender.com"
    Description: "Your Render app URL"

  ScheduleExpression:
    Type: String
    Default: "rate(5 minutes)"
    Description: "EventBridge schedule expression (rate(5 minutes) or cron expression)"

Resources:
  # Lambda 함수
  KeepAliveLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: discord-bot-keepalive
      Runtime: nodejs18.x
      Handler: aws-lambda-keepalive.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const https = require('https');
          const http = require('http');

          exports.handler = async (event) => {
              console.log('EventBridge Keep-Alive triggered:', new Date().toISOString());
              
              const RENDER_URL = process.env.RENDER_URL || 'https://onsurvey-discord-bot.onrender.com';
              const PING_ENDPOINT = `${RENDER_URL}/ping`;
              
              console.log(`Pinging: ${PING_ENDPOINT}`);
              
              try {
                  const result = await pingServer(PING_ENDPOINT);
                  
                  console.log('Keep-alive ping successful:', {
                      statusCode: result.statusCode,
                      responseTime: result.responseTime,
                      timestamp: new Date().toISOString()
                  });
                  
                  return {
                      statusCode: 200,
                      body: JSON.stringify({
                          success: true,
                          message: 'Keep-alive ping successful',
                          target: PING_ENDPOINT,
                          statusCode: result.statusCode,
                          responseTime: result.responseTime,
                          timestamp: new Date().toISOString()
                      })
                  };
                  
              } catch (error) {
                  console.error('Keep-alive ping failed:', error);
                  
                  return {
                      statusCode: 500,
                      body: JSON.stringify({
                          success: false,
                          message: 'Keep-alive ping failed',
                          error: error.message,
                          target: PING_ENDPOINT,
                          timestamp: new Date().toISOString()
                      })
                  };
              }
          };

          function pingServer(url) {
              return new Promise((resolve, reject) => {
                  const startTime = Date.now();
                  const isHttps = url.startsWith('https://');
                  const client = isHttps ? https : http;
                  
                  const req = client.get(url, {
                      timeout: 30000,
                      headers: {
                          'User-Agent': 'AWS-Lambda-KeepAlive/1.0',
                          'Accept': 'application/json'
                      }
                  }, (res) => {
                      let data = '';
                      
                      res.on('data', (chunk) => {
                          data += chunk;
                      });
                      
                      res.on('end', () => {
                          const responseTime = Date.now() - startTime;
                          
                          try {
                              const jsonData = JSON.parse(data);
                              resolve({
                                  statusCode: res.statusCode,
                                  responseTime: responseTime,
                                  data: jsonData
                              });
                          } catch (parseError) {
                              resolve({
                                  statusCode: res.statusCode,
                                  responseTime: responseTime,
                                  data: data
                              });
                          }
                      });
                  });
                  
                  req.on('error', (error) => {
                      reject(error);
                  });
                  
                  req.on('timeout', () => {
                      req.destroy();
                      reject(new Error('Request timeout'));
                  });
                  
                  req.setTimeout(30000);
              });
          }
      Environment:
        Variables:
          RENDER_URL: !Ref RenderUrl
      Timeout: 30
      MemorySize: 128
      Description: "Keep Discord bot alive by pinging Render server"

  # Lambda 실행 역할
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # EventBridge 규칙
  KeepAliveEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: discord-bot-keepalive-rule
      Description: "Trigger Lambda every 5 minutes to keep Discord bot alive"
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt KeepAliveLambdaFunction.Arn
          Id: KeepAliveTarget

  # Lambda에 EventBridge 권한 부여
  LambdaEventBridgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref KeepAliveLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt KeepAliveEventRule.Arn

Outputs:
  LambdaFunctionName:
    Description: "Name of the Lambda function"
    Value: !Ref KeepAliveLambdaFunction
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionName"

  EventRuleName:
    Description: "Name of the EventBridge rule"
    Value: !Ref KeepAliveEventRule
    Export:
      Name: !Sub "${AWS::StackName}-EventRuleName"

  LambdaFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt KeepAliveLambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"
